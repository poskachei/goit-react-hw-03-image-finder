{"version":3,"sources":["components/Loader.js","components/Modal.js","components/Searchbar.js","components/Button.js","components/ImageGalleryItem.js","components/ImageGallery.js","services/imageApi.js","App.js","serviceWorker.js","index.js"],"names":["Loader","type","color","height","width","React","Component","Modal","handleKeydown","e","code","props","closeModal","window","addEventListener","this","removeEventListener","largeImageURL","className","onClick","src","alt","Searchbar","state","inputValue","handleChange","setState","target","value","handleSubmit","preventDefault","onSubmit","onChange","autoComplete","autoFocus","placeholder","Button","ImageGalleryItem","webformatURL","tags","modal","ImageGallery","getURL","onItemClick","gallery","toggleModal","map","image","key","id","searchQuery","page","axios","get","then","response","data","hits","App","loading","error","isModalOpen","fetchImages","imageApi","prevState","catch","finally","handleSearchFormSubmit","query","prevProps","length","scrollTo","top","document","documentElement","scrollHeight","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.93a75f56.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Spinner from \"react-loader-spinner\";\r\nexport default class Loader extends React.Component {\r\n  render() {\r\n    return (\r\n      <Spinner type=\"ThreeDots\" color=\"#00BFFF\" height={100} width={100} />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeydown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeydown);\r\n  }\r\n\r\n  handleKeydown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      this.props.closeModal();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { largeImageURL, closeModal } = this.props;\r\n\r\n    return (\r\n      <div className=\"Overlay\" onClick={closeModal}>\r\n        <div className=\"Modal\">\r\n          <img src={largeImageURL} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Searchbar extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n    this.setState({ inputValue: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Button = ({ onClick }) => {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst ImageGalleryItem = ({ webformatURL, tags, modal }) => {\r\n  return (\r\n    <li className=\"ImageGalleryItem\" onClick={modal}>\r\n      <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from \"react\";\r\nimport ImageGalleryItem from \"./ImageGalleryItem\";\r\n\r\nexport default class ImageGallery extends React.Component {\r\n  state = {\r\n    largeImageURL: \"\",\r\n  };\r\n\r\n  getURL = (largeImageURL) => {\r\n    this.setState({ largeImageURL: largeImageURL });\r\n    this.props.onItemClick(this.state.largeImageURL);\r\n  };\r\n\r\n  render() {\r\n    const { gallery, toggleModal } = this.props;\r\n\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {gallery.map((image) => (\r\n          <ImageGalleryItem\r\n            key={image.id}\r\n            webformatURL={image.webformatURL}\r\n            tags={image.tags}\r\n            modal={() => toggleModal(image.largeImageURL)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"17197765-c51078dcc877b1a19d5004a4f\";\r\n\r\nconst fetchImageWithQuery = (searchQuery, page) => {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`\r\n    )\r\n    .then((response) => response.data.hits);\r\n};\r\n\r\nexport default {\r\n  fetchImageWithQuery,\r\n};\r\n","import React, { Component } from \"react\";\n\nimport Loader from \"./components/Loader\";\nimport Modal from \"./components/Modal\";\nimport Searchbar from \"./components/Searchbar\";\nimport Button from \"./components/Button\";\nimport ImageGallery from \"./components/ImageGallery\";\n\nimport imageApi from \"./services/imageApi\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    gallery: [],\n    loading: false,\n    error: null,\n    searchQuery: \"\",\n    page: 1,\n    largeImageURL: \"\",\n    isModalOpen: false,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n\n    if (prevQuery !== nextQuery) {\n      this.fetchImages();\n    }\n\n    const prevArray = prevState.gallery.length;\n    const nextArray = this.state.gallery.length;\n\n    if (prevArray !== nextArray) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  }\n\n  fetchImages = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({ loading: true });\n\n    imageApi\n      .fetchImageWithQuery(searchQuery, page)\n      .then((gallery) =>\n        this.setState((prevState) => ({\n          gallery: [...prevState.gallery, ...gallery],\n          page: prevState.page + 1,\n        }))\n      )\n      .catch((error) => this.setState({ error }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  handleSearchFormSubmit = (query) => {\n    this.setState({\n      searchQuery: query,\n      page: 1,\n      gallery: [],\n    });\n  };\n\n  toggleModal = (largeImageURL) => {\n    this.setState({\n      largeImageURL: largeImageURL,\n      isModalOpen: !this.state.isModalOpen,\n    });\n  };\n\n  render() {\n    const { gallery, loading, largeImageURL, isModalOpen } = this.state;\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.handleSearchFormSubmit} />\n        {gallery.length > 0 && (\n          <ImageGallery gallery={gallery} toggleModal={this.toggleModal} />\n        )}\n        {loading && <Loader />}\n        {gallery.length > 0 && !loading && (\n          <Button onClick={this.fetchImages} />\n        )}\n        {isModalOpen && (\n          <Modal largeImageURL={largeImageURL} closeModal={this.toggleModal} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}